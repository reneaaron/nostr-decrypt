import { Event, Filter, SimplePool } from 'nostr-tools';
import { Config } from '../types';
type EventMap = Map<Event, Set<string>>;
type SubMap = Map<string, {
    config: Config;
    eose: boolean;
}>;
type QueueMap = Map<string, Config>;
interface State {
    eventMap: EventMap;
    isBatching: boolean;
    isPurging: boolean;
    pool: SimplePool;
    pubkey: string;
    queueMap: QueueMap;
    subMap: SubMap;
}
interface Actions {
    addEventAndInsertSubIds: (event: Event, subIds: string[]) => void;
    clearQueue: () => void;
    deleteSubIdFromAllEvents: (subId: string) => void;
    deleteSubIdFromSubMap: (subId: string) => void;
    handleCacheRefresh: (subId: string, config: Config) => void;
    handleInvalidate: (subId: string, config: Config) => void;
    handleNewSub: (config: Config, subId: string) => void;
    handlePoolSub: (queueMap: QueueMap) => void;
    insertIntoQueue: (config: Config, subId: string) => void;
    insertSubIdToAnEvent: (subId: string, event: Event) => void;
    insertToSubMap: (subId: string, config: Config) => void;
    loadMore: (subId: string) => void;
    processQueue: () => void;
    purgeEvents: () => void;
    setEoseByFilters: (filters: Filter[], eose: boolean) => void;
    setEoseBySubIds: (subIds: string[], eose: boolean) => void;
    setPubkey: (pubkey: string) => void;
    setIsBatching: (isBatching: boolean) => void;
    setIsPurging: (isPurging: boolean) => void;
    unSub: (subId: string) => void;
}
export declare const useNostrStore: import("zustand").UseBoundStore<import("zustand").StoreApi<State & Actions>>;
export {};
